services:
  db:
    image: postgres:latest
    container_name: citosharp_db
    env_file: .env
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- NOVO: Serviço Redis (O Broker de Mensagens) ---
  redis:
    image: redis:6-alpine # Uma imagem leve e boa para desenvolvimento
    container_name: citosharp_redis
    ports:
      - "6379:6379" # Opcional: expõe a porta para acesso externo, útil para depuração
    volumes:
      - redis_data:/data # Volume para persistir dados do Redis (filas, cache)
    healthcheck: # Garante que o Redis está pronto para aceitar conexões
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    build: .
    container_name: citosharp_web
    env_file: .env
    # Ajuste no comando para garantir que tanto o DB quanto o Redis estejam prontos
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; while !</dev/tcp/redis/6379; do sleep 1; done; python manage.py migrate && python manage.py runserver 0.0.0.0:8000'
    volumes:
      - .:/app
      - ./storage:/app/storage
      - ./assets:/app/assets
    stdin_open: true
    tty: true
    ports:
      - 8000:8000
    depends_on:
      - db
      - redis # Adicionado: 'web' agora depende do 'redis' também

  # --- NOVO: Serviço Celery Worker ---
  celery_worker:
    build: . # O worker precisa do seu código Python, então builda do mesmo contexto
    container_name: citosharp_celery_worker
    env_file: .env
    # Comando para iniciar o Celery worker. Altere 'seu_projeto_django' para o nome da sua pasta do projeto Django.
    command: celery -A citosharp worker -l info
    volumes:
      - .:/app
      - ./storage:/app/storage
      - ./assets:/app/assets
    depends_on:
      - db # O worker precisa acessar o banco de dados (para GateModel, AnalysisResult, etc.)
      - redis # O worker depende do broker Redis para pegar as tarefas
    healthcheck: # Opcional, mas útil para verificar se o worker está ativo
      test: ["CMD-SHELL", "celery -A seu_projeto_django inspect ping"] # Inspeciona o worker
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Dá um tempo para o Celery iniciar antes de checar

  # --- Opcional: Serviço Celery Beat (para tarefas agendadas, se precisar no futuro) ---
  # celery_beat:
  #   build: .
  #   container_name: citosharp_celery_beat
  #   env_file: .env
  #   command: celery -A seu_projeto_django beat -l info --scheduler django_celery_beat.schedulers.DatabaseScheduler
  #   volumes:
  #     - .:/code
  #   depends_on:
  #     - db
  #     - redis
  #   healthcheck:
  #     test: ["CMD-SHELL", "celery -A seu_projeto_django inspect active"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

volumes:
  pgdata:
  redis_data: # Novo volume para persistir os dados do Redis
